************************************        # описание (клоужеры-замыкания)
Они нужны, для защиты от дублирования кода, 
когда в Clousures можно использовать свои внутренние условия, 
и использовать переменные которые находятся за пределами его!


//filterArray(array: numbers, f: (Int) -> Bool)
filterArray(array: numbers, f: {(i: Int) -> Bool in
    return i % 2 == 1
})

-----------------
filterArray(array: numbers, f: {i in
    return i % 2 == 0
})

-----------------
filterArray(array: numbers, f: { i in i % 2 == 1 })

-----------------
let arr_1 = filterArray(array: numbers, f: { $0 % 2 == 1 })

-----------------
// Если условие идет самым последним, то скобки можно не ставить!
let arr_3 = filterArray(array: numbers) { $0 % 2 == 0 }

-----------------
filterArray(array: numbers, f: {(i: Int) -> Bool in
    return i % 2 == 1
})


************************************        # примеры
let numbers = [1 ,2 ,3, 1, 12, 13, 12, 33, 24, 12]

func filterArray(array: [Int], f: (Int) -> Bool) -> [Int] {
    
    var filtered = [Int]()
    
    for i in array {
        if f(i) {
            filtered.append(i)
        }
    }
    return filtered
}

// 
func compare(i: Int) -> Bool {
    return i % 2 == 1
}

// 
func compare_2(i: Int) -> Bool {
    return i % 2 == 0
}

11 lesson 18min conspect!